#!/usr/bin/env python
from py_rhyme.visit import VisItAPI as Vis
from py_rhyme.visit.helpers.script import InlineCombination
import argparse

def main():
    parser = argparse.ArgumentParser( description='Linout plot of a given Rhyme output')

    parser.add_argument('chombo_path', help='Path to a Rhyme chombo output', type=str)

    parser.add_argument('-v', '--var', help='Plotting variable', type=str, default='rho')
    parser.add_argument('--point1', help='Line beginning point', nargs='+', type=float, default=[0, .5, .5])
    parser.add_argument('--point2', help='Line end point', nargs='+', type=float, default=[1, .5, .5])
    parser.add_argument('--range-scale', help='Range scale', choices=['log', 'linear'], type=str, default='linear')
    parser.add_argument('--domain-scale', help='Domain scale', choices=['log', 'linear'], type=str, default='linear')
    parser.add_argument('-w', '--line-width', help='Line width', type=int, default=4)
    parser.add_argument('--commands', help='Comma separated list of inline commands', type=str, default='')

    args = parser.parse_args()

    settings = { 'point1': args.point1, 'point2': args.point2,
        'line_width': args.line_width }

    v = Vis()
    v.open(args.chombo_path)
    v.lineout(variable=args.var, **settings)
    v.draw(xscale=args.domain_scale, yscale=args.range_scale)
    v.reset_view()

    combs = InlineCombination(v.current_cycle(), v.ncycles())

    combs.mode('p', 'Plot mode')
    combs.action('p', 'd', 'Draw', 'pd', lambda v, _: v.redraw(), after=lambda v, _: v.reset_view())
    combs.action('p', 'v', 'Change varable', 'pvrho_u', lambda o, v: o.change_variable(v), after=lambda v, _: v.reset_view())
    combs.action('p', 'w', 'Change line width', 'pw5', lambda v, w: v.redraw(line_width=int(w)), after=lambda v, _: v.reset_view())
    combs.action('p', '1', 'Change 1st point', 'p1(0, .5 .5)', lambda v, p: v.redraw(point1=eval(p)), after=lambda v, _: v.reset_view())
    combs.action('p', '2', 'Change 2nd point', 'p2(1, .5 .5)', lambda v, p: v.redraw(point2=eval(p)), after=lambda v, _: v.reset_view())
    combs.action('p', 'a', 'Add a new lineout', 'pae_tot', lambda o, v: o.lineout(str(v), **settings), after=lambda v, _: v.reset_view(draw_it=True))


    if len(args.commands) > 0:
        commands = args.commands.replace(' ', '').split(',')
        for command in commands:
            self.handle(v, command)


    combs.wait(v)

if __name__ == '__main__':
    main()
