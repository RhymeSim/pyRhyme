#!/usr/bin/env python
from py_rhyme.visit import VisItAPI as Vis
from py_rhyme.visit.script_helper import InlineCombination
import argparse


def main():
    parser = argparse.ArgumentParser(
        description='Plotting a slice of a given chombo file')

    parser.add_argument('chombo_path', help='Path to chombo file', type=str)

    parser.add_argument('--var', help='Pseudocolor plot variable', type=str, default='rho')
    parser.add_argument('-s', '--scaling', help='Pseudocolor plot scaling', choices=['linear', 'log'], type=str, default='log')
    parser.add_argument('--min', help='Pseudocolor minimum value', type=float, default=None)
    parser.add_argument('--max', help='Pseudocolor maximum value', type=float, default=None)
    parser.add_argument('-c', '--colortable', help='Pseudocolor colortable', type=str, default='RdYlBu')
    parser.add_argument('--invert', help='Inverting pseudocolor colortable', action='store_false')

    parser.add_argument('-a', '--axis', help='Slicing axis', choices=['x', 'y', 'z'], type=str, default='z')
    parser.add_argument('-p', '--percent', help='Slicing layer (percent)', type=int, default=50)
    parser.add_argument('--commands', help='Comma separated list of inline commands', type=str, default='')

    args = parser.parse_args()
    axis_type = 'ZAxis' if args.axis == 'z' else ('YAxis' if args.axis == 'y' else 'XAxis')


    v = Vis()
    v.open(args.chombo_path)
    v.pseudocolor(args.var, scaling=args.scaling, zmin=args.min, zmax=args.max,
        ct=args.colortable, invert_ct=args.invert)
    v.slice(origin_type='Percent', percent=args.percent, axis_type=axis_type)
    v.draw()

    combs = InlineCombination(v.current_cycle(), v.ncycles())

    combs.mode('p', 'Plot mode')
    combs.action('p', 'd', 'draw', 'pd', lambda v, _: v.draw())
    combs.action('p', 's', 'change scaling', 'pslinear', lambda v, s: v.redraw(scaling=str(s)), after=lambda v, _: v.draw())
    combs.action('p', 'v', 'change variable', 'pve_tot', lambda o, v: o.redraw(variable=str(v)), after=lambda v, _: v.draw())
    combs.action('p', 'u', 'set range upper bound', 'pu3.14e5', lambda v, u: v.redraw(zmax=float(u)), after=lambda v, _: v.draw())
    combs.action('p', 'l', 'set range lower bound', 'pl3.14e5', lambda v, l: v.redraw(zmin=float(l)), after=lambda v, _: v.draw())

    combs.mode('s', 'Slice mode')
    combs.action('s', 'l', 'change layer (%)', 'sl25', lambda v, l: v.redraw(percent=int(l)), after=lambda v, _: v.draw())


    if len(args.commands) > 0:
        commands = args.commands.replace(' ', '').split(',')
        for command in commands:
            self.handle(v, command)


    combs.wait(v)


if __name__ == '__main__':
    main()
