#!/usr/bin/env python
from py_rhyme.visit import VisItAPI as Vis
import argparse
import sys, os, glob, time, re


def print_usage():
    print('Following commands can be used to update the slice plot,')
    print('q            quit')
    print('d            draw')
    print('c[cycle]     cycle: c123')
    print('n            next cycle')
    print('p            previous cycle')
    print('l[cycles]    loop through database, starting from current cycle')
    print('s[scaling]   change the plot scaling: slinear')
    print('v[variable]  change variable: vrho_u')
    print('')


def handle_commands(v, ds_len):
    current_cycle = 0

    key = sys.stdin.read(1)

    if key == 'q':
        sys.exit(0)

    elif key == 'd':
        v.draw()

    elif key == 'c':
        cycle = int(sys.stdin.readline().replace('\n', ''))
        try:
            v.cycle(cycle)
        except (RuntimeError, RuntimeWarning) as err:
            print(err)

        print(current_cycle, cycle)
        current_cycle = cycle
        print(current_cycle, cycle)

    elif key == 'n':
        v.next_cycle()
        current_cycle += 1

    elif key == 'p':
        v.prev_cycle()
        current_cycle -= 1

    elif key == 'l':
        orig_cycle = current_cycle
        ncycles = str(sys.stdin.readline().replace('\n', ''))

        print(orig_cycle, current_cycle, current_cycle + int(ncycles) + 1)
        if len(ncycles) > 0:
            for i in range(current_cycle, current_cycle + int(ncycles) + 1):
                v.cycle(i)
        else:
            for i in range(current_cycle, ds_len + 1):
                v.cycle(i)

        v.cycle(orig_cycle)

    elif key == 's':
        scaling = str(sys.stdin.readline().replace('\n', ''))
        v.change_scaling(scaling)
        try:
            v.draw()
        except (RuntimeError, RuntimeWarning) as err:
            print(err)

    elif key == 'v':
        variable = str(sys.stdin.readline().replace('\n', ''))
        v.change_variable(variable)
        try:
            v.draw()
        except (RuntimeError, RuntimeWarning) as err:
            print(err)

    else:
        print_usage()

    time.sleep(.3)


def check_if_database(path):
    matches = re.findall('[0-9]{5}', path)

    if len(matches) < 1:
        return path

    ds = path.replace(matches[-1], '*')
    ds_len = len(glob.glob(ds))

    return (os.path.splitext(ds)[0], ds_len) if ds_len > 1 else (path, 1)


def main():
    parser = argparse.ArgumentParser(
        description='Plotting a slice of a given chombo file')

    parser.add_argument('chombo_path', help='Path to chombo file', type=str)

    parser.add_argument('--var', help='Pseudocolor plot variable',
        type=str, default='rho')
    parser.add_argument('-s', '--scaling', help='Pseudocolor plot scaling',
        choices=['linear', 'log'], type=str, default='log')
    parser.add_argument('--min', help='Pseudocolor minimum value',
        type=float, default=None)
    parser.add_argument('--max', help='Pseudocolor maximum value',
        type=float, default=None)
    parser.add_argument('-c', '--colortable', help='Pseudocolor colortable',
        type=str, default='RdYlBu')
    parser.add_argument('--invert', help='Inverting pseudocolor colortable',
        action='store_false')

    parser.add_argument('-a', '--axis', help='Slicing axis',
        choices=['x', 'y', 'z'], type=str, default='z')
    parser.add_argument('-p', '--percent', help='Slicing layer (percent)',
        type=int, default=50)

    args = parser.parse_args()

    if args.axis is 'x':
        axis_type = 'XAxis'
    elif args.axis is 'y':
        axis_type = 'YAxis'
    else:
        axis_type = 'ZAxis'

    ds, ds_len = check_if_database(args.chombo_path)

    v = Vis()
    v.open(ds)
    v.pseudocolor(args.var, scaling=args.scaling, zmin=args.min, zmax=args.max,
        ct=args.colortable, invert_ct=args.invert)
    v.slice(origin_type='Percent', val=args.percent, axis_type=axis_type)
    v.draw()


    print_usage()

    while(True):
        handle_commands(v, ds_len)

if __name__ == '__main__':
    main()
